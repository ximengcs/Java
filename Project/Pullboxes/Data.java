package pullboxes;

import java.util.HashSet;

public class Data {

	private HashSet<Box> box = new HashSet<Box>();
	private HashSet<Wall> wall = new HashSet<Wall>();
	private HashSet<Destination> destination = new HashSet<Destination>();
	private Person person = new Person( new Position( 0, 0 ) );
	private HashSet<Floor> floor = new HashSet<Floor>();
	private int count = 0;
	private int maxCount = 4; 
	
	public void setCount( int count ) {
		this.count = count;
	}
	
	public int getCount() {
		return count;
	}
	
	public int getMax() {
		return maxCount;
	}
	
	public void readPrevious() {
		count--;
	}
	
	public void readNext() {
		count++;
	}
	
	public boolean next() {
		box.clear();
		wall.clear();
		destination.clear();
		floor.clear();

		switch( count ) {
			case 1 : 
				acount( new int[][] {
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,1,4,1,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,1,1,1,1,2,1,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,1,4,2,3,5,1,1,1,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,1,1,1,5,5,2,4,1,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,1,2,1,1,1,1,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,1,4,1,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
				} );
				return true;
			case 2 : 
				acount( new int[][] {
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,1,3,5,5,1,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,1,5,2,2,1,0,1,1,1,0,0,0,0,0,0, },
					{ 0,0,0,0,0,1,5,2,5,1,0,1,4,1,0,0,0,0,0,0, },
					{ 0,0,0,0,0,1,1,1,5,1,1,1,4,1,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,1,1,5,5,5,5,4,1,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,1,5,5,5,1,5,5,1,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,1,5,5,5,1,1,1,1,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
				} );
				return true;
			case 3 : 
				acount( new int[][] {
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,1,5,5,5,5,5,1,1,0,0,0,0,0,0, },
					{ 0,0,0,0,0,1,1,2,1,1,1,5,5,1,0,0,0,0,0,0, },
					{ 0,0,0,0,0,1,5,3,5,2,5,2,5,1,0,0,0,0,0,0, },
					{ 0,0,0,0,0,1,5,4,4,1,2,5,1,1,0,0,0,0,0,0, },
					{ 0,0,0,0,0,1,1,4,4,1,5,5,1,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
				} );
				return true;
			case 4 : 
				acount( new int[][] {
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,1,1,5,5,1,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,1,3,2,5,1,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,1,1,2,5,1,1,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,1,1,5,2,5,1,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,1,4,2,5,5,1,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,1,4,4,2,4,1,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
					{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
				} );
				return true;
		}
		
		return false;
	}
	
	public int BoxNumber() {
		return box.size();
	}
	
	public void set( int count ) {
		this.count = count;
	}
	
	public void reset() {
		count = 1;
	}
	
	public HashSet<Box> nextBox() {
		return box;
	}
	public HashSet<Wall> nextWall() {
		return wall;
	}
	public HashSet<Destination> nextDestination() {
		return destination;
	}
	public Person nextPerson() {
		return person;
	}
	public HashSet<Floor> nextFloor() {
		return floor;
	}
	
	private void acount( int[][] ar ) {
		for( int i = 0; i < ar.length; i++ )
			for( int j = 0; j < ar[i].length; j++ ) {
				if( ar[i][j] == 1 ) { //Wall
					wall.add( new Wall( new Position( j, i ) ) );
				} else if( ar[i][j] == 2 ) { //Box
					box.add( new Box( new Position( j, i ) ) );
				} else if( ar[i][j] == 3 ) { //Person
					person.setPosition( new Position( j, i ) );
				} else if( ar[i][j] == 4 ) { //Destination
					destination.add( new Destination( new Position( j, i ) ) );
				}
				if( ar[i][j] != 0 )
					floor.add( new Floor( new Position( j, i ) ) );
			}
	}
	
	public static void main( String[] args ) {
		Data data = new Data();
		data.next();
		System.out.println( data.box );
	}
}
